import javax.swing.*;
import java.awt.*;

/**
 * Created by Kelsey Edge
 * 04/07/2017
 */

public class Game extends JFrame {
    private static Square[][] squareArray;

    private Game() {
        // Creating the Container
        setTitle("Test 2 : Kelsey Edge");
        setSize(750, 750);
        JPanel container = new JPanel();
        container.setLayout(new BorderLayout());
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        JPanel board = new JPanel();

        board.setLayout(new GridLayout(10, 10));

        this.squareArray = new Square[10][10];

        int k = 1;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                //creates new Squares at Square(), row, col, and value
                Square testSquare = new Square();
                testSquare.setCol(j);
                testSquare.setRow(i);
                testSquare.setValue("");
                testSquare.setIndex(k);

                //add action listener
                testSquare.addActionListener(e -> checkWhenClicked(testSquare));
                squareArray[i][j] = (testSquare);

                //set text to grid number
                testSquare.setText(Integer.toString(k));

                //start board with question mark in last box
                if (9 <= i && 9 <= j) {
                    testSquare.setTextLabel("?");
                    testSquare.setValue("?");
                }
                k++;
                //add squares to the board panel
                board.add(testSquare);
            }
        }

        //add board panel to container
        container.add(board);
        this.add(container);
        board.setVisible(true);
    }


    /**
     * Action Listener
     * When a square is clicked, if the clicked square is adjacent to a square
     * with a value "?", change clicked square to "?", and the "?" value square
     * back to it's grid value
     * @param testSquare square clicked
     */
    private void checkWhenClicked(Square testSquare) {
        Square k = checkRow(testSquare);
        Square c = checkCol(testSquare);

        //if the square you clicked is in the row of the square with value "?"
        if (k.getValue().startsWith("?")) {

            //change clicked square to ?
            testSquare.setTextLabel("?");
            testSquare.setValue("?");

            //set square with ? back to its grid number
            squareArray[k.getRow()][k.getCol()].setTextLabel(Integer.toString(k.getIndex()));
            squareArray[k.getRow()][k.getCol()].setValue(Integer.toString(k.getIndex()));
        }

        //if the square you clicked is in the column of the square with value "?"
        else if (c.getValue().startsWith("?")) {
            testSquare.setValue("?");
            testSquare.setTextLabel("?");
            //set square with ? back to its grid number
            squareArray[c.getRow()][c.getCol()].setTextLabel(Integer.toString(c.getIndex()));
            squareArray[c.getRow()][c.getCol()].setValue(Integer.toString(c.getIndex()));
        }
    }

    /**
     * Checks to see if clicked square has a square with a value of "?" in the same row
     * if so, it returns the square with the "?" value
     * if not, it returns square given
     * @param testSquare clicked square
     * @return square
     */
    private Square checkRow(Square testSquare){
        for(int i = 0; i < 10; i++){
            if (squareArray[testSquare.getRow()][i].isAQuestionMark()){
                if (checkIfValid(testSquare, squareArray[testSquare.getRow()][i])){
                    return squareArray[testSquare.getRow()][i];
                }
            }
        }
        return testSquare;
    }

    /**
     * Checks to see if clicked square has a square with a value of "?" in the same column
     * if so, it returns the square with the "?" value
     * if not, it returns square given
     * @param testSquare clicked square
     * @return square
     */
    private Square checkCol(Square testSquare){
        for(int i = 0; i < 10; i++){
            if (squareArray[i][testSquare.getCol()].isAQuestionMark()){
                if (checkIfValid( testSquare, squareArray[i][testSquare.getCol()])) {
                    return squareArray[i][testSquare.getCol()];
                }
            }
        }
        return testSquare;
    }

    //Checks to see if square clicked is adjacent to the square with value question mark

    /**
     * Checks to see if square clicked is adjacent to the square with the value "?"
     * @param testSquare square clicked
     * @param questionMarkSquare square with value "?"
     * @return true/false
     */
    private boolean checkIfValid(Square testSquare, Square questionMarkSquare){
        if ((Math.abs(questionMarkSquare.getCol() - testSquare.getCol()) == 1) && (Math.abs(questionMarkSquare.getRow() - testSquare.getRow()) == 0)){
            return true;
        }

        else
            return (Math.abs(questionMarkSquare.getRow() - testSquare.getRow())) == 1 && (Math.abs(questionMarkSquare.getCol() - testSquare.getCol()) == 0);
    }


    public static void main(String[] args){

        Game testGame = new Game();

        testGame.setVisible(true);

    }
}
